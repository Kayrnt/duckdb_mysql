diff --git a/cmake/libevent.cmake b/cmake/libevent.cmake
index 364d9cc..06b8172 100644
--- a/cmake/libevent.cmake
+++ b/cmake/libevent.cmake
@@ -54,42 +54,7 @@ MACRO(RESET_LIBEVENT_VARIABLES)
 ENDMACRO()
 
 MACRO(FIND_LIBEVENT_VERSION)
-  SET(TEST_SRC
-    "#include <event.h>
-     #include <stdio.h>
-    int main()
-    {
-      fprintf(stdout, \"%s\", LIBEVENT_VERSION);
-    }
-    "
-    )
-  FILE(WRITE
-    "${CMAKE_BINARY_DIR}/find_libevent_version.c"
-    "${TEST_SRC}"
-    )
-  TRY_RUN(TEST_RUN_RESULT COMPILE_TEST_RESULT
-    ${CMAKE_BINARY_DIR}
-    "${CMAKE_BINARY_DIR}/find_libevent_version.c"
-    CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${LIBEVENT_INCLUDE_DIRS}"
-    COMPILE_OUTPUT_VARIABLE OUTPUT
-    RUN_OUTPUT_VARIABLE RUN_OUTPUT
-    )
-  # MESSAGE(STATUS "TRY_EVENT TEST_RUN_RESULT is ${TEST_RUN_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_TEST_RESULT is ${COMPILE_TEST_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_OUTPUT_VARIABLE is ${OUTPUT}")
-  # MESSAGE(STATUS "TRY_EVENT RUN_OUTPUT_VARIABLE is ${RUN_OUTPUT}")
-
-  IF(COMPILE_TEST_RESULT)
-    SET(LIBEVENT_VERSION_STRING "${RUN_OUTPUT}")
-    STRING(REGEX REPLACE
-      "([.-0-9]+).*" "\\1" LIBEVENT_VERSION "${LIBEVENT_VERSION_STRING}")
-  ELSE()
-    MESSAGE(WARNING "Could not determine LIBEVENT_VERSION")
-  ENDIF()
-
-  MESSAGE(STATUS "LIBEVENT_VERSION (${WITH_LIBEVENT}) ${LIBEVENT_VERSION}")
-  MESSAGE(STATUS "LIBEVENT_INCLUDE_DIRS ${LIBEVENT_INCLUDE_DIRS}")
-  MESSAGE(STATUS "LIBEVENT_LIBRARIES ${LIBEVENT_LIBRARIES}")
+  SET(LIBEVENT_VERSION_STRING "(system)")
 ENDMACRO()
 
 MACRO (FIND_SYSTEM_LIBEVENT)
@@ -160,7 +125,7 @@ MACRO (MYSQL_CHECK_LIBEVENT)
   ENDIF()
   IF(LIBEVENT_FOUND)
     FIND_LIBEVENT_VERSION()
-    IF(LIBEVENT_VERSION VERSION_LESS MIN_LIBEVENT_VERSION_REQUIRED)
+    IF(FALSE)
       MESSAGE(FATAL_ERROR
         "LIBEVENT version must be at least ${MIN_LIBEVENT_VERSION_REQUIRED}, "
         "found ${LIBEVENT_VERSION}.\nPlease use -DWITH_LIBEVENT=bundled")
diff --git a/cmake/os/Darwin.cmake b/cmake/os/Darwin.cmake
index 283b2e2..b9e87e7 100644
--- a/cmake/os/Darwin.cmake
+++ b/cmake/os/Darwin.cmake
@@ -29,7 +29,7 @@ IF(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
 ENDIF()
 
 # We require at least XCode 10.0
-IF(NOT FORCE_UNSUPPORTED_COMPILER)
+IF(FALSE)
   IF(MY_COMPILER_IS_CLANG)
     CHECK_C_SOURCE_RUNS("
       int main()
diff --git a/cmake/os/FreeBSD.cmake b/cmake/os/FreeBSD.cmake
index 7511f00..342480c 100644
--- a/cmake/os/FreeBSD.cmake
+++ b/cmake/os/FreeBSD.cmake
@@ -34,7 +34,7 @@ LIST(APPEND CMAKE_REQUIRED_INCLUDES "/usr/local/include")
 # INCLUDE_DIRECTORIES(SYSTEM /usr/local/include)
 
 # We require at least Clang 6.0 (FreeBSD 12).
-IF(NOT FORCE_UNSUPPORTED_COMPILER)
+IF(FALSE)
   IF(MY_COMPILER_IS_CLANG)
     CHECK_C_SOURCE_RUNS("
       int main()
diff --git a/configure.cmake b/configure.cmake
index 96664b1..99e2644 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -403,21 +403,8 @@ MY_CHECK_CXX_COMPILER_FLAG("-fvisibility=hidden" HAVE_VISIBILITY_HIDDEN)
 # Code tests
 #
 
-CHECK_C_SOURCE_RUNS("
-#include <time.h>
-int main()
-{
-  struct timespec ts;
-  return clock_gettime(CLOCK_MONOTONIC, &ts);
-}" HAVE_CLOCK_GETTIME)
-
-CHECK_C_SOURCE_RUNS("
-#include <time.h>
-int main()
-{
-  struct timespec ts;
-  return clock_gettime(CLOCK_REALTIME, &ts);
-}" HAVE_CLOCK_REALTIME)
+set(HAVE_CLOCK_GETTIME 1)
+set(HAVE_CLOCK_REALTIME 1)
 
 IF(NOT STACK_DIRECTION)
   IF(CMAKE_CROSSCOMPILING)
diff --git a/test/mysql-server-mysql-8.0.32/libmysql/CMakeLists.txt b/test/mysql-server-mysql-8.0.32/libmysql/CMakeLists.txt
index 2ee26bfa..5b247f43 100644
--- a/test/mysql-server-mysql-8.0.32/libmysql/CMakeLists.txt
+++ b/test/mysql-server-mysql-8.0.32/libmysql/CMakeLists.txt
@@ -252,13 +252,9 @@ ELSEIF(FREEBSD)
   SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)
   MESSAGE(STATUS "BSD built in DNS SRV APIs")
 ELSE()
-  FIND_LIBRARY(RESOLV_LIBRARY NAMES resolv)
-  IF (RESOLV_LIBRARY)
-    LIST(APPEND LIBS_TO_LINK ${RESOLV_LIBRARY})
-    SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)
-    SET(HAVE_DNS_SRV 1)
-    MESSAGE(STATUS "Found Unix DNS SRV APIs")
-  ENDIF()
+  SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)
+  SET(HAVE_DNS_SRV 1)
+  MESSAGE(STATUS "Found Unix DNS SRV APIs")
 ENDIF()

 IF(HAVE_DNS_SRV EQUAL 0)
