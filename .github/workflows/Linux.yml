name: Linux
on: [push, pull_request,repository_dispatch]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash

jobs:
  linux:
    name: Linux Release
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: [ '<submodule_version>' ]
        arch: ['linux_amd64', 'linux_arm64', 'linux_amd64_gcc4']
        vcpkg_version: [ '2023.10.19' ]
        include:
          - arch: 'linux_amd64_gcc4'
            container: 'quay.io/pypa/manylinux2014_x86_64'
            vcpkg_triplet: 'x64-linux'
          - arch: 'linux_amd64'
            container: 'ubuntu:18.04'
            vcpkg_triplet: 'x64-linux'
          - arch: 'linux_arm64'
            container: 'ubuntu:18.04'
            vcpkg_triplet: 'arm64-linux'
    env:
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}
      GEN: Ninja
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    steps:
    - name: Install required ubuntu packages
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      run: |
        apt-get update -y -qq
        apt-get install -y -qq software-properties-common
        add-apt-repository ppa:git-core/ppa
        apt-get update -y -qq
        apt-get install -y -qq ninja-build make gcc-multilib g++-multilib libssl-dev wget openjdk-8-jdk zip maven unixodbc-dev libc6-dev-i386 lib32readline6-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip build-essential checkinstall libffi-dev curl libz-dev openssh-client
        apt-get install -y -qq tar pkg-config cmake autoconf autoconf-archive libicu-dev libudev-dev libudns-dev
        apt-get install -y -qq gcc-8 g++-8 dnsutils

    - name: Install Git 2.18.5
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      run: |
        wget https://github.com/git/git/archive/refs/tags/v2.18.5.tar.gz
        tar xvf v2.18.5.tar.gz
        cd git-2.18.5
        make
        make prefix=/usr install
        git --version

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Install MySQL Server
      if: ${{ matrix.arch == 'linux_arm64' }}
      shell: bash
      run: |
        apt-get install -y -qq libmysqlclient-dev

    - name: Build uca9dump
      if: ${{ matrix.arch == 'linux_arm64' }}
      shell: bash
      run: |
        # because we are cross compiling we need to build this separately for the CURRENT machine
        wget https://github.com/mysql/mysql-server/archive/mysql-8.0.32.tar.gz
        tar xvf mysql-8.0.32.tar.gz
        cd mysql-server-mysql-8.0.32
        wget https://raw.githubusercontent.com/jacob5412/MySQL-Medium/main/my_config.h
        printf '#include "print_version.h"\nextern "C" {\nvoid print_version() {}\n}' > print_version.c
        g++ -std=c++17 -Iinclude -I. strings/uca9-dump.cc -o uca9dump
        g++ -std=c++17 `mysql_config --cflags` -Iinclude -I. utilities/comp_client_err.cc print_version.c -o comp_client_err `mysql_config --libs`
        g++ -std=c++17 -Iinclude -I. scripts/comp_sql.cc -o comp_sql
        mv uca9dump /usr/bin/
        mv comp_client_err /usr/bin/
        mv comp_sql /usr/bin/
        uca9dump
        cd ..

    - name: Checkout DuckDB to version
      if: ${{ matrix.duckdb_version != '<submodule_version>'}}
      run: |
        cd duckdb
        git checkout ${{ matrix.duckdb_version }}

    - name: Setup ManyLinux2014
      if: ${{ matrix.arch == 'linux_amd64_gcc4' }}
      run: |
        ./duckdb/scripts/setup_manylinux2014.sh general aws-cli ccache ssh openssl python_alias
        yum install -y m4 automake autoconf pkgconfig libevent-devel autoconf-archive libicu
        yum install -y devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils

    - name: Setup Ubuntu
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      uses: ./duckdb/.github/actions/ubuntu_18_setup
      with:
        aarch64_cross_compile: 1

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 8eb57355a4ffb410a2e94c07b4dca2dffbee8e50

    - name: Build extension
      env:
        GEN: ninja
        STATIC_LIBCPP: 1
        CC: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-gcc' || '' }}
        CXX: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-g++' || '' }}
      run: |
        make release

    - name: Test Extension
      shell: bash
      run: |
        build/release/test/unittest "*test/sql/failed_to_connect.test"

    - uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.arch}}-extensions
        path: |
          build/release/extension/mysql_scanner/mysql_scanner.duckdb_extension

    - name: Log Errors
      if: failure()
      shell: bash
      run: |
        cat /__w/mysql_scanner/mysql_scanner/vcpkg/buildtrees/libmysql/*.log
