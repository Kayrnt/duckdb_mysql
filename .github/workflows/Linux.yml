name: Linux
on: [push, pull_request,repository_dispatch]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash

jobs:
  linux:
    name: Linux Release
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: [ '<submodule_version>' ]
        arch: ['linux_amd64', 'linux_arm64', 'linux_amd64_gcc4']
        vcpkg_version: [ '2023.04.15' ]
        include:
          - arch: 'linux_amd64_gcc4'
            container: 'quay.io/pypa/manylinux2014_x86_64'
            vcpkg_triplet: 'x64-linux'
          - arch: 'linux_amd64'
            container: 'ubuntu:18.04'
            vcpkg_triplet: 'x64-linux'
          - arch: 'linux_arm64'
            container: 'ubuntu:18.04'
            vcpkg_triplet: 'arm64-linux'
    env:
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}
      GEN: Ninja
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Checkout DuckDB to version
      if: ${{ matrix.duckdb_version != '<submodule_version>'}}
      run: |
        cd duckdb
        git checkout ${{ matrix.duckdb_version }}

    - name: Setup ManyLinux2014
      if: ${{ matrix.arch == 'linux_amd64_gcc4' }}
      run: |
        ./duckdb/scripts/setup_manylinux2014.sh general aws-cli ccache ssh openssl python_alias
        yum install -y m4 automake autoconf pkgconfig libevent-devel autoconf-archive libicu
        yum install -y devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils

    - name: Setup Ubuntu
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      uses: ./duckdb/.github/actions/ubuntu_18_setup
      with:
        aarch64_cross_compile: 1

    - name: Install extra ubuntu packages
      if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
      run: |
        apt-get install -y -qq tar pkg-config cmake autoconf autoconf-archive libicu-dev
        apt-get install -y -qq gcc-8 g++-8

    - name: Install MySQL (amd64)
      if: ${{ matrix.arch == 'linux_amd64' }}
      run: |
        apt-get install -y -qq mysql-server

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 8eb57355a4ffb410a2e94c07b4dca2dffbee8e50

    - name: Patch vcpkg
      shell: bash
      run: |
        export VCPKG_BASE_PATH=`dirname ${VCPKG_TOOLCHAIN_PATH}`/../..
        export PATCH_PATH=`pwd`/.github/patches/vcpkg_linux.patch
        cp .github/patches/mysql_linux.patch $VCPKG_BASE_PATH/ports/libmysql/mysql_patch.patch
        (cd $VCPKG_BASE_PATH && git apply $PATCH_PATH)

    - name: Build extension
      env:
        GEN: ninja
        STATIC_LIBCPP: 1
        CC: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-gcc' || '' }}
        CXX: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-g++' || '' }}
      run: |
        make release

    - name: Setup MySQL
      if: ${{ matrix.arch == 'linux_amd64' }}
      run: |
        mysql < test/test_data.sql
        mysql < test/remove_root_password.sql
        mysql -u root -e "SELECT 42"

    - name: Test simple
      run: |
        ./build/release/test/unittest "*test/sql/failed_to_connect.test"

    - name: Run all tests
      if: ${{ matrix.arch == 'linux_amd64' }}
      run: |
        make test_release

    - uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.arch}}-extensions
        path: |
          build/release/extension/mysql_scanner/mysql_scanner.duckdb_extension

    - name: Log Errors
      if: always()
      shell: bash
      run: |
        cat /__w/mysql_scanner/mysql_scanner/vcpkg/buildtrees/libmysql/*.log
