diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6033494e..d5fcfe04 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -806,14 +806,11 @@ INCLUDE(zlib)
 INCLUDE(zstd)
 INCLUDE(lz4)
 INCLUDE(icu)
-INCLUDE(libevent)
 INCLUDE(ssl)
 INCLUDE(sasl)
 INCLUDE(ldap)
 INCLUDE(kerberos)
 INCLUDE(rpc)
-INCLUDE(readline)
-INCLUDE(protobuf)
 INCLUDE(package_name)
 INCLUDE(libutils)
 INCLUDE(plugin)
@@ -1539,8 +1536,6 @@ ELSE()
   SET(DEFAULT_TMPDIR "\"${TMPDIR}\"")
 ENDIF()
 
-INCLUDE(cmake/boost.cmake)
-
 IF (LINUX)
   OPTION(WITH_SYSTEMD "Enable installation of systemd support files" OFF)
   OPTION(WITH_SYSTEMD_DEBUG "Build in systemd debug trace" OFF)
@@ -1866,28 +1861,6 @@ IF(WITH_AUTHENTICATION_KERBEROS)
   ENDIF()
 ENDIF()
 
-# Add system/bundled editline.
-MYSQL_CHECK_EDITLINE()
-SET(EDITLINE_WARN_GIVEN)
-WARN_MISSING_SYSTEM_EDITLINE(EDITLINE_WARN_GIVEN)
-IF(EDITLINE_WARN_GIVEN)
-  MESSAGE(FATAL_ERROR
-    "-DWITH_EDITLINE=system, but missing system libraries.\n"
-    "You can use -DWITH_EDITLINE=bundled instead."
-    )
-ENDIF()
-
-# Add libevent
-MYSQL_CHECK_LIBEVENT()
-SET(LIBEVENT_WARN_GIVEN)
-WARN_MISSING_SYSTEM_LIBEVENT(LIBEVENT_WARN_GIVEN)
-IF(LIBEVENT_WARN_GIVEN)
-  MESSAGE(FATAL_ERROR
-    "-DWITH_LIBEVENT=system, but missing system libraries.\n"
-    "You can use -DWITH_LIBEVENT=bundled instead."
-    )
-ENDIF()
-
 # Add lz4 library
 MYSQL_CHECK_LZ4()
 # Add icu library
@@ -1929,15 +1902,7 @@ IF(APPLE)
   GET_FILENAME_COMPONENT(HOMEBREW_BASE ${HOMEBREW_HOME} DIRECTORY)
   IF(EXISTS ${HOMEBREW_BASE}/include/boost)
     FOREACH(SYSTEM_LIB ICU LIBEVENT LZ4 PROTOBUF ZSTD FIDO)
-      IF(FALSE)
-        MESSAGE(FATAL_ERROR
-          "WITH_${SYSTEM_LIB}=system is not compatible with Homebrew boost\n"
-          "MySQL depends on ${BOOST_PACKAGE_NAME} with a set of patches.\n"
-          "Including headers from ${HOMEBREW_BASE}/include "
-          "will break the build.\n"
-          "Please use WITH_${SYSTEM_LIB}=bundled\n"
-          "or do 'brew uninstall boost' or 'brew unlink boost'"
-          )
+      IF(WITH_${SYSTEM_LIB} STREQUAL "system")
       ENDIF()
     ENDFOREACH()
   ENDIF()
diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index c19dfbf4..ff93fe35 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -36,17 +36,6 @@ INCLUDE_DIRECTORIES(
   ${CMAKE_CURRENT_SOURCE_DIR}/include
 )
 
-MYSQL_ADD_EXECUTABLE(mysql
-  ${CMAKE_SOURCE_DIR}/sql-common/net_ns.cc
-  completion_hash.cc
-  mysql.cc
-  pattern_matcher.cc
-  readline.cc
-  client_query_attributes.cc
-  ${CMAKE_CURRENT_SOURCE_DIR}/common/user_registration.cc
-  LINK_LIBRARIES mysqlclient client_base ${EDITLINE_LIBRARY}
-  )
-
 IF(NOT WITHOUT_SERVER)
   MYSQL_ADD_EXECUTABLE(mysql_upgrade
     upgrade/program.cc
diff --git a/client/dump/abstract_mysql_chain_element_extension.cc b/client/dump/abstract_mysql_chain_element_extension.cc
index 4f02dac6..b5a46066 100644
--- a/client/dump/abstract_mysql_chain_element_extension.cc
+++ b/client/dump/abstract_mysql_chain_element_extension.cc
@@ -25,7 +25,7 @@
 #include "client/dump/abstract_mysql_chain_element_extension.h"
 
 #include <stddef.h>
-#include <boost/algorithm/string.hpp>
+#include "client/dump/thread.h"
 #include <functional>
 #include <optional>
 #include <sstream>
diff --git a/client/dump/mysql_chain_element_options.cc b/client/dump/mysql_chain_element_options.cc
index 8e4ebdb9..c3a8a3b6 100644
--- a/client/dump/mysql_chain_element_options.cc
+++ b/client/dump/mysql_chain_element_options.cc
@@ -24,7 +24,7 @@
 
 #include "client/dump/mysql_chain_element_options.h"
 
-#include <boost/algorithm/string.hpp>
+#include "client/dump/thread.h"
 
 using namespace Mysql::Tools::Dump;
 
diff --git a/client/dump/mysql_object_reader.cc b/client/dump/mysql_object_reader.cc
index 52146459..e0a62d9f 100644
--- a/client/dump/mysql_object_reader.cc
+++ b/client/dump/mysql_object_reader.cc
@@ -25,7 +25,7 @@
 #include "client/dump/mysql_object_reader.h"
 
 #include <sys/types.h>
-#include <boost/algorithm/string.hpp>
+#include "client/dump/thread.h"
 #include <functional>
 
 using namespace Mysql::Tools::Dump;
@@ -125,7 +125,7 @@ void Mysql_object_reader::read_table_rows_task(
   }
 
   /* remove last comma from column_names */
-  column_names = boost::algorithm::replace_last_copy(column_names, ",", "");
+  column_names = my_boost::algorithm::remove_last_copy(column_names, ',');
 
   Mysql::Tools::Base::Mysql_query_runner::cleanup_result(&columns);
 
diff --git a/client/dump/mysqldump_tool_chain_maker.cc b/client/dump/mysqldump_tool_chain_maker.cc
index af5a38ad..233ce723 100644
--- a/client/dump/mysqldump_tool_chain_maker.cc
+++ b/client/dump/mysqldump_tool_chain_maker.cc
@@ -25,7 +25,7 @@
 #include "client/dump/mysqldump_tool_chain_maker.h"
 
 #include <stddef.h>
-#include <boost/algorithm/string.hpp>
+#include "client/dump/thread.h"
 #include <functional>
 
 #include "client/dump/compression_lz4_writer.h"
@@ -79,7 +79,7 @@ I_object_reader *Mysqldump_tool_chain_maker::create_chain(
     if (m_options->m_compress_output_algorithm.has_value()) {
       std::string algorithm_name =
           m_options->m_compress_output_algorithm.value();
-      boost::to_lower(algorithm_name);
+      my_boost::to_lower(algorithm_name);
 
       Abstract_output_writer_wrapper *compression_writer_as_wrapper = nullptr;
       I_output_writer *compression_writer_as_writer = nullptr;
diff --git a/client/dump/object_filter.cc b/client/dump/object_filter.cc
index 39b34ab8..c9f07b3f 100644
--- a/client/dump/object_filter.cc
+++ b/client/dump/object_filter.cc
@@ -24,6 +24,7 @@
 
 #ifndef UNITTEST_OBJECT_FILTER_PARSER
 #include "client/dump/object_filter.h"
+#include "client/dump/thread.h"
 
 #include "client/dump/database.h"
 #include "client/dump/event_scheduler_event.h"
@@ -35,58 +36,13 @@
 #include "client/dump/trigger.h"
 #endif
 #include <stddef.h>
-#include <boost/algorithm/string.hpp>
-#include <boost/tokenizer.hpp>
 
 using std::placeholders::_1;
 
 std::string parse_inclusion_string(
     std::string val, std::vector<std::pair<std::string, std::string>> &list,
     bool allow_schema, bool is_user_object) {
-  try {
-    typedef boost::tokenizer<boost::escaped_list_separator<char>> tokenizer_t;
-    typedef boost::tokenizer<boost::escaped_list_separator<char>>::iterator
-        titerator_t;
-    typedef boost::escaped_list_separator<char> separator_t;
-
-    const separator_t sep_csl('\\', ',', '\"');
-    const separator_t sep_user('\\', '@', '\"');
-    const separator_t sep_object('\\', '.', '\'');
-    const separator_t *sep = is_user_object ? &sep_user : &sep_object;
-
-    tokenizer_t outer_tok(val, sep_csl);
-    for (titerator_t it = outer_tok.begin(); it != outer_tok.end(); ++it) {
-      std::string elt = *it;
-      boost::trim(elt);
-      tokenizer_t itok(elt, *sep);
-      std::vector<std::string> object_parts;
-      for (titerator_t iit = itok.begin(); iit != itok.end(); ++iit) {
-        std::string s = *iit;
-        boost::trim(s);
-        if (s.length() == 0)
-          return "empty object element specified (\"" + *it + "\")";
-        if (is_user_object)
-          object_parts.push_back(("'" + s + "'"));
-        else
-          object_parts.push_back(s);
-      }
-
-      if (object_parts.size() == 1) {
-        if (is_user_object)
-          list.push_back(std::make_pair(object_parts[0], "%"));
-        else
-          list.push_back(std::make_pair("%", object_parts[0]));
-      } else if (object_parts.size() == 2 && (allow_schema || is_user_object)) {
-        list.push_back(std::make_pair(object_parts[0], object_parts[1]));
-      } else
-        return "Invalid object name specified (\"" + *it + "\")";
-    }
-  } catch (std::exception const &ex) {
-    return ex.what();
-  } catch (...) {
-    return "unknown exception";
-  }
-  return "";
+  return "tokenize not supported";
 }
 
 #ifndef UNITTEST_OBJECT_FILTER_PARSER
diff --git a/client/dump/table.cc b/client/dump/table.cc
index 9bb62efb..ffe150bd 100644
--- a/client/dump/table.cc
+++ b/client/dump/table.cc
@@ -24,10 +24,10 @@
 
 #include "client/dump/table.h"
 
-#include <boost/algorithm/string.hpp>
 #include <sstream>
 
 #include "client/dump/pattern_matcher.h"
+#include "client/dump/thread.h"
 
 using namespace Mysql::Tools::Dump;
 
@@ -51,27 +51,27 @@ Table::Table(uint64 id, const std::string &name, const std::string &schema,
       @TODO: Instead, look up INFORMATION_SCHEMA and get the table details.
     */
 
-    boost::trim_left(line);
-    if (!engine_line_read) boost::trim_if(line, boost::is_any_of(","));
-    if (boost::starts_with(line, "KEY ") ||
-        boost::starts_with(line, "INDEX ") ||
-        boost::starts_with(line, "UNIQUE KEY ") ||
-        boost::starts_with(line, "UNIQUE INDEX ") ||
-        boost::starts_with(line, "FULLTEXT KEY ") ||
-        boost::starts_with(line, "FULLTEXT INDEX ") ||
-        boost::starts_with(line, "SPATIAL KEY ") ||
-        boost::starts_with(line, "SPATIAL INDEX ") ||
-        boost::starts_with(line, "CONSTRAINT ")) {
+    my_boost::trim_left(line);
+    if (!engine_line_read) my_boost::trim_if(line, ',');
+    if (my_boost::starts_with(line, "KEY ") ||
+        my_boost::starts_with(line, "INDEX ") ||
+        my_boost::starts_with(line, "UNIQUE KEY ") ||
+        my_boost::starts_with(line, "UNIQUE INDEX ") ||
+        my_boost::starts_with(line, "FULLTEXT KEY ") ||
+        my_boost::starts_with(line, "FULLTEXT INDEX ") ||
+        my_boost::starts_with(line, "SPATIAL KEY ") ||
+        my_boost::starts_with(line, "SPATIAL INDEX ") ||
+        my_boost::starts_with(line, "CONSTRAINT ")) {
       m_indexes_sql_definition.push_back(line);
     } else {
       /*
         Make sure we detect the table options clauses,
         even with different syntaxes (with or without TABLESPACE)
       */
-      if (boost::starts_with(line, ")") && boost::contains(line, "ENGINE=")) {
+      if (my_boost::starts_with(line, ")") && my_boost::contains(line, "ENGINE=")) {
         engine_line_read = true;
         std::string &sql_def = m_sql_definition_without_indexes;
-        sql_def = boost::algorithm::replace_last_copy(sql_def, ",", "");
+        sql_def = my_boost::algorithm::remove_last_copy(sql_def, ',');
       } else if (!first_line && !engine_line_read)
         line += ",";
       m_sql_definition_without_indexes += line + '\n';
diff --git a/client/dump/thread.h b/client/dump/thread.h
index 6bfaf188..c45512bf 100644
--- a/client/dump/thread.h
+++ b/client/dump/thread.h
@@ -26,12 +26,76 @@
 #define THREAD_INCLUDED
 
 #include <exception>
+#include <string>
+#include <cstring>
+#include <algorithm>
 
 #include "my_thread.h"
 #include "mysql/components/services/bits/my_thread_bits.h"
 
 namespace my_boost {
 
+namespace algorithm {
+
+inline std::string remove_last_copy(const std::string &input, char input_char) {
+  for(size_t c = input.size(); c > 0; c--) {
+    if (input[c - 1] == input_char) {
+      return input.substr(0, c - 1) + input.substr(c, input.size() - c + 1);
+    }
+  }
+  return input;
+}
+
+}
+
+inline bool contains(const std::string &haystack, const std::string &needle) {
+  return haystack.find(needle) != std::string::npos;
+}
+
+inline bool starts_with(const std::string &haystack, const std::string &needle) {
+  if (haystack.size() < needle.size()) {
+    return false;
+  }
+  return memcmp(haystack.c_str(), needle.c_str(), needle.size()) == 0;
+}
+
+inline void to_lower(std::string &input) {
+  std::transform(input.begin(), input.end(), input.begin(),
+    [](unsigned char c){ return std::tolower(c); });
+}
+
+inline void trim_left(std::string &input) {
+  size_t c = 0;
+  for(c = 0; c < input.size(); c++) {
+    if (input[c] != ' ') {
+      break;
+    }
+  }
+  if (c == 0) {
+    return;
+  }
+  input = input.substr(c, input.size() - c);
+}
+
+inline void trim_if(std::string &input, char c) {
+  if (input.size() == 0) {
+    return;
+  }
+  size_t start = 0;
+  size_t end = input.size() - 1;
+  for(start = 0; start < input.size(); start++) {
+    if (input[start] != c) {
+      break;
+    }
+  }
+  for(end = input.size(); end > start; end--) {
+    if (input[end - 1] != c) {
+      break;
+    }
+  }
+  input = input.substr(start, end - start);
+}
+
 class thread {
  public:
   template <typename TCallable>
diff --git a/cmake/libevent.cmake b/cmake/libevent.cmake
index 364d9cca..06b8172c 100644
--- a/cmake/libevent.cmake
+++ b/cmake/libevent.cmake
@@ -54,42 +54,7 @@ MACRO(RESET_LIBEVENT_VARIABLES)
 ENDMACRO()
 
 MACRO(FIND_LIBEVENT_VERSION)
-  SET(TEST_SRC
-    "#include <event.h>
-     #include <stdio.h>
-    int main()
-    {
-      fprintf(stdout, \"%s\", LIBEVENT_VERSION);
-    }
-    "
-    )
-  FILE(WRITE
-    "${CMAKE_BINARY_DIR}/find_libevent_version.c"
-    "${TEST_SRC}"
-    )
-  TRY_RUN(TEST_RUN_RESULT COMPILE_TEST_RESULT
-    ${CMAKE_BINARY_DIR}
-    "${CMAKE_BINARY_DIR}/find_libevent_version.c"
-    CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${LIBEVENT_INCLUDE_DIRS}"
-    COMPILE_OUTPUT_VARIABLE OUTPUT
-    RUN_OUTPUT_VARIABLE RUN_OUTPUT
-    )
-  # MESSAGE(STATUS "TRY_EVENT TEST_RUN_RESULT is ${TEST_RUN_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_TEST_RESULT is ${COMPILE_TEST_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_OUTPUT_VARIABLE is ${OUTPUT}")
-  # MESSAGE(STATUS "TRY_EVENT RUN_OUTPUT_VARIABLE is ${RUN_OUTPUT}")
-
-  IF(COMPILE_TEST_RESULT)
-    SET(LIBEVENT_VERSION_STRING "${RUN_OUTPUT}")
-    STRING(REGEX REPLACE
-      "([.-0-9]+).*" "\\1" LIBEVENT_VERSION "${LIBEVENT_VERSION_STRING}")
-  ELSE()
-    MESSAGE(WARNING "Could not determine LIBEVENT_VERSION")
-  ENDIF()
-
-  MESSAGE(STATUS "LIBEVENT_VERSION (${WITH_LIBEVENT}) ${LIBEVENT_VERSION}")
-  MESSAGE(STATUS "LIBEVENT_INCLUDE_DIRS ${LIBEVENT_INCLUDE_DIRS}")
-  MESSAGE(STATUS "LIBEVENT_LIBRARIES ${LIBEVENT_LIBRARIES}")
+  SET(LIBEVENT_VERSION_STRING "(system)")
 ENDMACRO()
 
 MACRO (FIND_SYSTEM_LIBEVENT)
@@ -160,7 +125,7 @@ MACRO (MYSQL_CHECK_LIBEVENT)
   ENDIF()
   IF(LIBEVENT_FOUND)
     FIND_LIBEVENT_VERSION()
-    IF(LIBEVENT_VERSION VERSION_LESS MIN_LIBEVENT_VERSION_REQUIRED)
+    IF(FALSE)
       MESSAGE(FATAL_ERROR
         "LIBEVENT version must be at least ${MIN_LIBEVENT_VERSION_REQUIRED}, "
         "found ${LIBEVENT_VERSION}.\nPlease use -DWITH_LIBEVENT=bundled")
diff --git a/cmake/os/Darwin.cmake b/cmake/os/Darwin.cmake
index 283b2e2d..b9e87e7e 100644
--- a/cmake/os/Darwin.cmake
+++ b/cmake/os/Darwin.cmake
@@ -29,7 +29,7 @@ IF(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
 ENDIF()
 
 # We require at least XCode 10.0
-IF(NOT FORCE_UNSUPPORTED_COMPILER)
+IF(FALSE)
   IF(MY_COMPILER_IS_CLANG)
     CHECK_C_SOURCE_RUNS("
       int main()
diff --git a/cmake/os/FreeBSD.cmake b/cmake/os/FreeBSD.cmake
index 7511f005..342480c1 100644
--- a/cmake/os/FreeBSD.cmake
+++ b/cmake/os/FreeBSD.cmake
@@ -34,7 +34,7 @@ LIST(APPEND CMAKE_REQUIRED_INCLUDES "/usr/local/include")
 # INCLUDE_DIRECTORIES(SYSTEM /usr/local/include)
 
 # We require at least Clang 6.0 (FreeBSD 12).
-IF(NOT FORCE_UNSUPPORTED_COMPILER)
+IF(FALSE)
   IF(MY_COMPILER_IS_CLANG)
     CHECK_C_SOURCE_RUNS("
       int main()
