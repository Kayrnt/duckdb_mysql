diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6033494e..39872c42 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -813,7 +813,6 @@ INCLUDE(ldap)
 INCLUDE(kerberos)
 INCLUDE(rpc)
 INCLUDE(readline)
-INCLUDE(protobuf)
 INCLUDE(package_name)
 INCLUDE(libutils)
 INCLUDE(plugin)
@@ -1929,7 +1928,7 @@ IF(APPLE)
   GET_FILENAME_COMPONENT(HOMEBREW_BASE ${HOMEBREW_HOME} DIRECTORY)
   IF(EXISTS ${HOMEBREW_BASE}/include/boost)
     FOREACH(SYSTEM_LIB ICU LIBEVENT LZ4 PROTOBUF ZSTD FIDO)
-      IF(FALSE)
+      IF(WITH_${SYSTEM_LIB} STREQUAL "system")
         MESSAGE(FATAL_ERROR
           "WITH_${SYSTEM_LIB}=system is not compatible with Homebrew boost\n"
           "MySQL depends on ${BOOST_PACKAGE_NAME} with a set of patches.\n"
diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index c19dfbf4..ff93fe35 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -36,17 +36,6 @@ INCLUDE_DIRECTORIES(
   ${CMAKE_CURRENT_SOURCE_DIR}/include
 )
 
-MYSQL_ADD_EXECUTABLE(mysql
-  ${CMAKE_SOURCE_DIR}/sql-common/net_ns.cc
-  completion_hash.cc
-  mysql.cc
-  pattern_matcher.cc
-  readline.cc
-  client_query_attributes.cc
-  ${CMAKE_CURRENT_SOURCE_DIR}/common/user_registration.cc
-  LINK_LIBRARIES mysqlclient client_base ${EDITLINE_LIBRARY}
-  )
-
 IF(NOT WITHOUT_SERVER)
   MYSQL_ADD_EXECUTABLE(mysql_upgrade
     upgrade/program.cc
diff --git a/client/dump/object_filter.cc b/client/dump/object_filter.cc
index 39b34ab8..0cf9d23e 100644
--- a/client/dump/object_filter.cc
+++ b/client/dump/object_filter.cc
@@ -36,57 +36,13 @@
 #endif
 #include <stddef.h>
 #include <boost/algorithm/string.hpp>
-#include <boost/tokenizer.hpp>
 
 using std::placeholders::_1;
 
 std::string parse_inclusion_string(
     std::string val, std::vector<std::pair<std::string, std::string>> &list,
     bool allow_schema, bool is_user_object) {
-  try {
-    typedef boost::tokenizer<boost::escaped_list_separator<char>> tokenizer_t;
-    typedef boost::tokenizer<boost::escaped_list_separator<char>>::iterator
-        titerator_t;
-    typedef boost::escaped_list_separator<char> separator_t;
-
-    const separator_t sep_csl('\\', ',', '\"');
-    const separator_t sep_user('\\', '@', '\"');
-    const separator_t sep_object('\\', '.', '\'');
-    const separator_t *sep = is_user_object ? &sep_user : &sep_object;
-
-    tokenizer_t outer_tok(val, sep_csl);
-    for (titerator_t it = outer_tok.begin(); it != outer_tok.end(); ++it) {
-      std::string elt = *it;
-      boost::trim(elt);
-      tokenizer_t itok(elt, *sep);
-      std::vector<std::string> object_parts;
-      for (titerator_t iit = itok.begin(); iit != itok.end(); ++iit) {
-        std::string s = *iit;
-        boost::trim(s);
-        if (s.length() == 0)
-          return "empty object element specified (\"" + *it + "\")";
-        if (is_user_object)
-          object_parts.push_back(("'" + s + "'"));
-        else
-          object_parts.push_back(s);
-      }
-
-      if (object_parts.size() == 1) {
-        if (is_user_object)
-          list.push_back(std::make_pair(object_parts[0], "%"));
-        else
-          list.push_back(std::make_pair("%", object_parts[0]));
-      } else if (object_parts.size() == 2 && (allow_schema || is_user_object)) {
-        list.push_back(std::make_pair(object_parts[0], object_parts[1]));
-      } else
-        return "Invalid object name specified (\"" + *it + "\")";
-    }
-  } catch (std::exception const &ex) {
-    return ex.what();
-  } catch (...) {
-    return "unknown exception";
-  }
-  return "";
+  return "tokenize not supported";
 }
 
 #ifndef UNITTEST_OBJECT_FILTER_PARSER
diff --git a/cmake/libevent.cmake b/cmake/libevent.cmake
index 364d9cca..06b8172c 100644
--- a/cmake/libevent.cmake
+++ b/cmake/libevent.cmake
@@ -54,42 +54,7 @@ MACRO(RESET_LIBEVENT_VARIABLES)
 ENDMACRO()
 
 MACRO(FIND_LIBEVENT_VERSION)
-  SET(TEST_SRC
-    "#include <event.h>
-     #include <stdio.h>
-    int main()
-    {
-      fprintf(stdout, \"%s\", LIBEVENT_VERSION);
-    }
-    "
-    )
-  FILE(WRITE
-    "${CMAKE_BINARY_DIR}/find_libevent_version.c"
-    "${TEST_SRC}"
-    )
-  TRY_RUN(TEST_RUN_RESULT COMPILE_TEST_RESULT
-    ${CMAKE_BINARY_DIR}
-    "${CMAKE_BINARY_DIR}/find_libevent_version.c"
-    CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${LIBEVENT_INCLUDE_DIRS}"
-    COMPILE_OUTPUT_VARIABLE OUTPUT
-    RUN_OUTPUT_VARIABLE RUN_OUTPUT
-    )
-  # MESSAGE(STATUS "TRY_EVENT TEST_RUN_RESULT is ${TEST_RUN_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_TEST_RESULT is ${COMPILE_TEST_RESULT}")
-  # MESSAGE(STATUS "TRY_EVENT COMPILE_OUTPUT_VARIABLE is ${OUTPUT}")
-  # MESSAGE(STATUS "TRY_EVENT RUN_OUTPUT_VARIABLE is ${RUN_OUTPUT}")
-
-  IF(COMPILE_TEST_RESULT)
-    SET(LIBEVENT_VERSION_STRING "${RUN_OUTPUT}")
-    STRING(REGEX REPLACE
-      "([.-0-9]+).*" "\\1" LIBEVENT_VERSION "${LIBEVENT_VERSION_STRING}")
-  ELSE()
-    MESSAGE(WARNING "Could not determine LIBEVENT_VERSION")
-  ENDIF()
-
-  MESSAGE(STATUS "LIBEVENT_VERSION (${WITH_LIBEVENT}) ${LIBEVENT_VERSION}")
-  MESSAGE(STATUS "LIBEVENT_INCLUDE_DIRS ${LIBEVENT_INCLUDE_DIRS}")
-  MESSAGE(STATUS "LIBEVENT_LIBRARIES ${LIBEVENT_LIBRARIES}")
+  SET(LIBEVENT_VERSION_STRING "(system)")
 ENDMACRO()
 
 MACRO (FIND_SYSTEM_LIBEVENT)
@@ -160,7 +125,7 @@ MACRO (MYSQL_CHECK_LIBEVENT)
   ENDIF()
   IF(LIBEVENT_FOUND)
     FIND_LIBEVENT_VERSION()
-    IF(LIBEVENT_VERSION VERSION_LESS MIN_LIBEVENT_VERSION_REQUIRED)
+    IF(FALSE)
       MESSAGE(FATAL_ERROR
         "LIBEVENT version must be at least ${MIN_LIBEVENT_VERSION_REQUIRED}, "
         "found ${LIBEVENT_VERSION}.\nPlease use -DWITH_LIBEVENT=bundled")
diff --git a/cmake/os/Darwin.cmake b/cmake/os/Darwin.cmake
index 283b2e2d..b9e87e7e 100644
--- a/cmake/os/Darwin.cmake
+++ b/cmake/os/Darwin.cmake
@@ -29,7 +29,7 @@ IF(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
 ENDIF()
 
 # We require at least XCode 10.0
-IF(NOT FORCE_UNSUPPORTED_COMPILER)
+IF(FALSE)
   IF(MY_COMPILER_IS_CLANG)
     CHECK_C_SOURCE_RUNS("
       int main()
diff --git a/cmake/os/FreeBSD.cmake b/cmake/os/FreeBSD.cmake
index 7511f005..342480c1 100644
--- a/cmake/os/FreeBSD.cmake
+++ b/cmake/os/FreeBSD.cmake
@@ -34,7 +34,7 @@ LIST(APPEND CMAKE_REQUIRED_INCLUDES "/usr/local/include")
 # INCLUDE_DIRECTORIES(SYSTEM /usr/local/include)
 
 # We require at least Clang 6.0 (FreeBSD 12).
-IF(NOT FORCE_UNSUPPORTED_COMPILER)
+IF(FALSE)
   IF(MY_COMPILER_IS_CLANG)
     CHECK_C_SOURCE_RUNS("
       int main()
diff --git a/configure.cmake b/configure.cmake
index 96664b16..99e26446 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -403,21 +403,8 @@ MY_CHECK_CXX_COMPILER_FLAG("-fvisibility=hidden" HAVE_VISIBILITY_HIDDEN)
 # Code tests
 #
 
-CHECK_C_SOURCE_RUNS("
-#include <time.h>
-int main()
-{
-  struct timespec ts;
-  return clock_gettime(CLOCK_MONOTONIC, &ts);
-}" HAVE_CLOCK_GETTIME)
-
-CHECK_C_SOURCE_RUNS("
-#include <time.h>
-int main()
-{
-  struct timespec ts;
-  return clock_gettime(CLOCK_REALTIME, &ts);
-}" HAVE_CLOCK_REALTIME)
+set(HAVE_CLOCK_GETTIME 1)
+set(HAVE_CLOCK_REALTIME 1)
 
 IF(NOT STACK_DIRECTION)
   IF(CMAKE_CROSSCOMPILING)
diff --git a/libmysql/CMakeLists.txt b/libmysql/CMakeLists.txt
index bc900c58..475559a2 100644
--- a/libmysql/CMakeLists.txt
+++ b/libmysql/CMakeLists.txt
@@ -255,10 +255,10 @@ ELSE()
   FIND_LIBRARY(RESOLV_LIBRARY NAMES resolv)
   IF (RESOLV_LIBRARY)
     LIST(APPEND LIBS_TO_LINK ${RESOLV_LIBRARY})
-    SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)
-    SET(HAVE_DNS_SRV 1)
-    MESSAGE(STATUS "Found Unix DNS SRV APIs")
   ENDIF()
+  SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)
+  SET(HAVE_DNS_SRV 1)
+  MESSAGE(STATUS "Found Unix DNS SRV APIs")
 ENDIF()
 
 IF(HAVE_DNS_SRV EQUAL 0)
